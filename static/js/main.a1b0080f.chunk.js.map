{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","useState","currentSmile","setCurrentSmile","smileWidth","setSmileWidth","amountSteps","setAmountSteps","amountImages","setAmountImages","animationTime","setAnimationTime","endOfList","length","beginOfList","className","style","width","transition","map","img","indexImg","src","alt","transform","htmlFor","type","id","min","max","value","onChange","event","target","onClick","App","state","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1b0080f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n}\n\nconst Carousel: React.FC<Props> = ({\n  images, step, frameSize, itemWidth, animationDuration,\n}) => {\n  const [currentSmile, setCurrentSmile] = useState(0);\n  const [smileWidth, setSmileWidth] = useState(itemWidth);\n  const [amountSteps, setAmountSteps] = useState(step);\n  const [amountImages, setAmountImages] = useState(frameSize);\n  const [animationTime, setAnimationTime] = useState(animationDuration);\n\n  const endOfList\n    = -(+smileWidth * (images.length - amountImages - amountSteps));\n  const beginOfList = -(+smileWidth * amountSteps);\n\n  function slideForward(): void {\n    if (currentSmile > -(+smileWidth * (images.length - amountImages))) {\n      setCurrentSmile(currentSmile - (+smileWidth * amountSteps));\n    }\n\n    if (currentSmile >= -(+smileWidth * images.length)\n      && currentSmile <= endOfList) {\n      setCurrentSmile(-(+smileWidth * (images.length - amountImages)));\n    }\n  }\n\n  function slideBack() {\n    if (currentSmile >= -(+smileWidth * amountSteps)) {\n      setCurrentSmile(0);\n    }\n\n    if (currentSmile >= -(+smileWidth * images.length)\n      && currentSmile <= beginOfList) {\n      setCurrentSmile(currentSmile + (+smileWidth * amountSteps));\n    }\n  }\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${+smileWidth * amountImages}px`,\n        transition: `all ${animationDuration / 1000}s ease-in`,\n      }}\n    >\n      <ul className=\"Carousel__list\">\n        {images.map((img, indexImg) => (\n          <li\n            key={img}\n          >\n            <img\n              src={img}\n              alt={`${indexImg}`}\n              className=\"Carousel--item\"\n              style={{\n                width: `${smileWidth}px`,\n                transform: `translate(${currentSmile}px)`,\n                transition: `all ${animationTime / 1000}s ease-in`,\n              }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <label htmlFor=\"width\">\n        Width:\n        <input\n          type=\"number\"\n          id=\"width\"\n          min=\"130\"\n          max=\"390\"\n          step=\"10\"\n          value={`${smileWidth}`}\n          onChange={event => {\n            setSmileWidth(+event.target.value);\n            setCurrentSmile(0);\n          }}\n        />\n      </label>\n\n      <label htmlFor=\"step\">\n        Step:\n        <input\n          type=\"number\"\n          id=\"step\"\n          min=\"1\"\n          max={images.length - 1}\n          value={`${amountSteps}`}\n          onChange={event => setAmountSteps(+event.target.value)}\n        />\n      </label>\n\n      <label htmlFor=\"frame-size\">\n        Frame size:\n        <input\n          type=\"number\"\n          id=\"frame-size\"\n          min=\"1\"\n          max={images.length - 1}\n          value={`${amountImages}`}\n          onChange={event => {\n            setAmountImages(+event.target.value);\n            setCurrentSmile(0);\n          }}\n        />\n      </label>\n\n      <label htmlFor=\"animation-duration\">\n        Animation duration:\n        <input\n          type=\"number\"\n          id=\"animation-duration\"\n          min=\"1000\"\n          max=\"5000\"\n          step=\"1000\"\n          value={`${animationTime}`}\n          onChange={event => setAnimationTime(+event.target.value)}\n        />\n      </label>\n\n      <button\n        type=\"button\"\n        onClick={slideBack}\n      >\n        Prev\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={slideForward}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}