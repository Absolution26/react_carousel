{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentSmile","setCurrentSmile","smileWidth","setSmileWidth","amountSteps","setAmountSteps","amountImages","setAmountImages","animationTime","setAnimationTime","infiniteSmiles","setInfiniteSmiles","endOfList","length","beginOfList","className","style","width","transition","map","img","indexImg","src","alt","transform","type","min","max","value","onChange","event","target","htmlFor","id","checked","onClick","App","state","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83b20dd3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst Carousel: React.FC<Props> = ({\n  images, step, frameSize, itemWidth, animationDuration, infinite,\n}) => {\n  const [currentSmile, setCurrentSmile] = useState(0);\n  const [smileWidth, setSmileWidth] = useState(itemWidth);\n  const [amountSteps, setAmountSteps] = useState(step);\n  const [amountImages, setAmountImages] = useState(frameSize);\n  const [animationTime, setAnimationTime] = useState(animationDuration);\n  const [infiniteSmiles, setInfiniteSmiles] = useState(infinite);\n\n  const endOfList\n    = -(+smileWidth * (images.length - amountImages - amountSteps));\n  const beginOfList = -(+smileWidth * amountSteps);\n\n  function slideForward(): void {\n    if (currentSmile > -(+smileWidth * (images.length - amountImages))) {\n      setCurrentSmile(currentSmile - (+smileWidth * amountSteps));\n    }\n\n    if (currentSmile >= -(+smileWidth * images.length)\n      && currentSmile <= endOfList) {\n      setCurrentSmile(-(+smileWidth * (images.length - amountImages)));\n    }\n  }\n\n  function slideBack() {\n    if (currentSmile >= -(+smileWidth * amountSteps)) {\n      setCurrentSmile(0);\n    }\n\n    if (currentSmile >= -(+smileWidth * images.length)\n      && currentSmile <= beginOfList) {\n      setCurrentSmile(currentSmile + (+smileWidth * amountSteps));\n    }\n  }\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${+smileWidth * amountImages}px`,\n        transition: `all ${animationDuration / 1000}s ease-in`,\n      }}\n    >\n      <ul className=\"Carousel__list\">\n        {images.map((img, indexImg) => (\n          <li\n            key={img}\n          >\n            <img\n              src={img}\n              alt={`${indexImg}`}\n              className=\"Carousel--item\"\n              style={{\n                width: `${smileWidth}px`,\n                transform: `translate(${currentSmile}px)`,\n                transition: `all ${animationTime / 1000}s ease-in`,\n              }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      Width:&nbsp;\n      <input\n        type=\"number\"\n        min=\"130\"\n        max=\"390\"\n        step=\"10\"\n        value={`${smileWidth}`}\n        onChange={event => {\n          setSmileWidth(+event.target.value);\n          setCurrentSmile(0);\n        }}\n      />\n\n      Step:&nbsp;\n      <input\n        type=\"number\"\n        min=\"1\"\n        max={images.length - 1}\n        value={`${amountSteps}`}\n        onChange={event => setAmountSteps(+event.target.value)}\n      />\n\n      Frame size:&nbsp;\n      <input\n        type=\"number\"\n        min=\"1\"\n        max={images.length - 1}\n        value={`${amountImages}`}\n        onChange={event => {\n          setAmountImages(+event.target.value);\n          setCurrentSmile(0);\n        }}\n      />\n\n      Animation duration:&nbsp;\n      <input\n        type=\"number\"\n        min=\"1000\"\n        max=\"5000\"\n        value={`${animationTime}`}\n        onChange={event => setAnimationTime(+event.target.value)}\n      />\n\n      {/* sorry, Could not beautifully implement an infinite carousel */}\n      <label htmlFor=\"isInfinite\">\n        Infinite&nbsp;\n        <input\n          type=\"checkbox\"\n          id=\"isInfinite\"\n          checked={infiniteSmiles}\n          onChange={event => setInfiniteSmiles(event.target.checked)}\n        />\n      </label>\n\n      <button\n        type=\"button\"\n        onClick={slideBack}\n      >\n        Prev\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={slideForward}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}